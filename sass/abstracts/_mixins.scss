/// Mixin helping to define theme specific values by creating classes
/// for each theme
///
/// @author Brady Blair
///
/// @access public
///
/// @param {Length} $property - CSS property to use
/// @param {Length} $dark - CSS Value for Dark Theme
/// @param {Length} $light - CSS Value for Light Theme
@mixin theme($property, $dark, $light) {
  .theme-dark & {
    #{$property}: #{$dark};
  }
  .theme-light & {
    #{$property}: #{$light};
  }
}

@function min-width-for($width-name) {
  $width: map-get($breakpointMap, $width-name);
  @return 'min-width: #{$width}';
}

// Breakpoint Handler
@mixin respond-to($breakpoint) {
  @media (min-width-for($breakpoint)) {
    @content;
  }
}

// Text
@mixin typography-sm {
  font-size: 0.75rem;
  letter-spacing: -0.25px;
  line-height: 15px;
}

// Hover Transition
@mixin color-smooth {
  transition-property: background-color, border-color, color, fill, stroke;
  transition-timing-function: ease-in-out;
  transition-duration: 150ms;
}

// Hover Transition
@mixin transform-smooth {
  transition-property: transform;
  transition-timing-function: ease-out;
  transition-duration: 300ms;
}


// Shows a larger text message on medium breakpoint
@mixin expand-text($display-prop) {
  display: none;

  @include respond-to('m') {
    display: #{$display-prop};
  }
}
